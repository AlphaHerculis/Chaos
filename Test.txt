Git：目前世界上最先进的分布式版本控制系统。

优点：1、更方便的储存版本；2、可恢复之前的版本；3、更方便进行版本的对比；4、协同合作

Git 工作区域：
    Git Repository（Git 仓库）    最终确定的文件保存到仓库，成为一个新的版本，并对他人可见
    暂存区    暂存已经修改的文件，最后统一提交到 Git 仓库中
    工作区（Working Directory）      添加、编辑、修改文件等动作

使用前的简单配置：
    git config --global user.name 'Chaos'   声明用户名
    git config --global user.email 'Chaos@163.com'  声明用户邮箱
    git config --global --list  查看用户信息
建立git仓库：
    git init 将当前所在目录文件夹创建为git仓库/初始化git仓库
git提交版本：
    git add 文件名/.   添加文件至git仓库（“.” 表示当前目录下所有文件）
    git commit -m "版本信息"    提交文件至git仓库，备注版本改动
    git log     显示提交日志（日期由近至远）
            注：1.若显示内容杂乱，可加上参数：--pretty=oneline  每行显示一条提交信息（简略版）；
                2.commit_id：一串长长的16进制的数字，是文件的版本号，可凭借此id完成“版本穿越”
    git status      查看工作区状态，可查看文件是否被修改
    git diff        查看文件修改信息
    git reset --hard HEAD^      回退至上一个版本（此时会消除两个版本之间的修改记录）
            注：1.回退至上上个版本：HEAD^^;回退至以前的100个版本：HEAD~100；
                2.“版本穿越”：若有回退之前的版本号，则可以通过--hard [commit_id前4~7位]命令实现回到未来———即回到回退版本操作之前；
                3.Git内部有一个HEAD指针，其指向哪个版本号，那么当前版本就是哪个，因此我们可以实现版本历史的穿梭
    git reflog  记录执行命令历史数据（可用来查文件的版本号，以实现版本穿越——回到过去/未来版本）
